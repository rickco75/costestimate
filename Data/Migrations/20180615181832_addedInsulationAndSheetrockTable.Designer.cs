// <auto-generated />
using CostEstimate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CostEstimate.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180615181832_addedInsulationAndSheetrockTable")]
    partial class addedInsulationAndSheetrockTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CostEstimate.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CostEstimate.Models.ClearingAndGrading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BasementGrade");

                    b.Property<double>("Culvert");

                    b.Property<double>("ErosControlMaterials");

                    b.Property<double>("ErosControlSubLabor");

                    b.Property<double>("GravelPadsAndFabric");

                    b.Property<double>("InitialWallsBackfill");

                    b.Property<int>("ProjectId");

                    b.Property<double>("RoughGrade");

                    b.Property<double>("SepticSystem");

                    b.Property<double>("SurveyCost");

                    b.Property<double>("WaterLine");

                    b.HasKey("Id");

                    b.ToTable("ClearingAndGrading");
                });

            modelBuilder.Entity("CostEstimate.Models.CostModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AveragePerSqFootFinsihed");

                    b.Property<double>("AvgCostGarage");

                    b.Property<double>("AvgCostMainLevel");

                    b.Property<double>("AvgCostUnfinsihedBasement");

                    b.Property<double>("AvgCostUpperLoft");

                    b.Property<double>("AvgPerSqFtFinBasement");

                    b.Property<double>("BasementUnfinishedSqFeet");

                    b.Property<double>("FinishedBasement");

                    b.Property<double>("Garage");

                    b.Property<double>("MainLevelSquareFeet");

                    b.Property<int>("ProjectId");

                    b.Property<double>("TotalSquareFtHouse");

                    b.Property<double>("TotalSquareFtUnderRoof");

                    b.Property<double>("UpperLevelLoft");

                    b.HasKey("Id");

                    b.ToTable("CostModel");
                });

            modelBuilder.Entity("CostEstimate.Models.Foundation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AdditionalSlabAsNeeded");

                    b.Property<double>("AdditionalWallAsNeeded");

                    b.Property<double>("ConcreteForSlab");

                    b.Property<double>("ConcreteForWallAndFooting");

                    b.Property<double>("ConcretePumpAsNeeded");

                    b.Property<double>("FootingWallFormMaterial");

                    b.Property<double>("FormMaterialSlab");

                    b.Property<double>("LaborForWallAndFooting");

                    b.Property<int>("ProjectId");

                    b.Property<double>("TermiteTreatment");

                    b.Property<double>("Waterproofing");

                    b.HasKey("Id");

                    b.ToTable("Foundation");
                });

            modelBuilder.Entity("CostEstimate.Models.FramingAndDryIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AdditionalDecks");

                    b.Property<double>("CoveredDecks");

                    b.Property<double>("CoveredDecksLabor");

                    b.Property<double>("ExteriorDeckBalusters");

                    b.Property<double>("ExteriorDeckLabor");

                    b.Property<double>("ExteriorDeckMaterial");

                    b.Property<double>("ExteriorDoors");

                    b.Property<double>("FirePlaces");

                    b.Property<double>("FramingLabor");

                    b.Property<double>("FramingMaterial");

                    b.Property<double>("FrontDoor");

                    b.Property<double>("FrontPorch");

                    b.Property<double>("GarageDoor");

                    b.Property<double>("NailAndMisc");

                    b.Property<int>("ProjectId");

                    b.Property<double>("RoofLabor");

                    b.Property<double>("RoofMaterialShingle");

                    b.Property<double>("SlidingLabor");

                    b.Property<double>("SlidingMaterial");

                    b.Property<double>("StoneVeneer");

                    b.Property<double>("WindowsSliders");

                    b.HasKey("Id");

                    b.ToTable("FramingAndDryIn");
                });

            modelBuilder.Entity("CostEstimate.Models.InsulationAndSheetrock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("FireCaulk");

                    b.Property<double>("Insulation");

                    b.Property<int>("ProjectId");

                    b.Property<double>("RoofInsulation");

                    b.Property<double>("SheetrockAndFinish");

                    b.Property<double>("Soundproofing");

                    b.HasKey("Id");

                    b.ToTable("InsulationAndSheetrock");
                });

            modelBuilder.Entity("CostEstimate.Models.NonConstructionItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ArchitectPlans");

                    b.Property<double>("AttorneyFee");

                    b.Property<double>("BuildersLiabilityInsurances");

                    b.Property<double>("BuildersRiskInsurances");

                    b.Property<double>("BuildersWorkmanCompIns");

                    b.Property<double>("BuildingPermits");

                    b.Property<double>("ConstructionLoanFee");

                    b.Property<double>("ConstructionLoanInterest");

                    b.Property<double>("InspectionFeesAndCO");

                    b.Property<double>("Misc");

                    b.Property<int>("ProjectId");

                    b.Property<double>("PropertyTaxes");

                    b.Property<double>("TempElectricServiceMeter");

                    b.Property<double>("WarrantyServices");

                    b.Property<double>("WaterMeter");

                    b.Property<double>("WorkmansCompInsurances");

                    b.HasKey("Id");

                    b.ToTable("NonConstructionItems");
                });

            modelBuilder.Entity("CostEstimate.Models.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateChanged");

                    b.Property<string>("OptionName")
                        .IsRequired();

                    b.Property<string>("OptionValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("CostEstimate.Models.Projects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cell");

                    b.Property<string>("City");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Fax");

                    b.Property<string>("Home");

                    b.Property<string>("JobName")
                        .IsRequired();

                    b.Property<string>("LegalDescription");

                    b.Property<string>("LotNumber");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<string>("StreetName");

                    b.Property<string>("StreetNumber");

                    b.Property<string>("SubdivisionName");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CostEstimate.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CostEstimate.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CostEstimate.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CostEstimate.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
